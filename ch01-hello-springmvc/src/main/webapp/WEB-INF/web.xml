<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    
    <!--
       声明注册servlet的核心对象DispatcherServlet
       需要在Tomcat服务器启动后，创建DispatcherServlet的实例
       为什么要创建DispatcherServlet的实例
           在DispatcherServlet的创建过程中，会同时创建springMVC的容器对象，读取springMVC的配置文件，并把文件中对象都创建好，
           当用户发起请求就可可以直接创建对象了。

       servlet的初始化会执行init()方法。DispatcherServlet在它的init中创建容器{
           WebApplicationContext applicationContext = new ClassPathXmlApplicationContext(springMVC);
       }
       然后把容器对象放入容器(servletContext)(web容器(Tomcat提供)容器)中
       getServletContext().setAttribute(key,applicationContext)

       启动Tomcat报错，会读取这个文件:/WEB-INF/springMVC-servlet.xml
       springMVC创建容器的时候，读取的配置文件默认是:/WEB-INF/(servlet-name)-servlet.xml
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定义springMVC读取配置文件的位置-->
        <init-param>
            <!--spring配置文件位置的属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--
        在Tomcat容器启启动后，创建servlet对象
        load-on-startup:表示Tomcat启动后创建对象的顺序。它的值是大于等于0的整数，它的值越小，tomcat创建对象的时间就越早，
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <!--
        使用框架的时候，url-pattern可以使用两种值
           1.使用扩展名的方式，语法*.xxxxx,.其中xxxxx是自定义的扩展名。常使用的方式是*.do,*.action,*.mvc等等
               http://localhost:8080/meb/some.do
               http://localhost:8080/meb/other.do
           2.使用"/",
        -->

        <servlet-name>myweb</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>    
</web-app>